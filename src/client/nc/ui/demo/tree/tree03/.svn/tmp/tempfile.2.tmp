/*
 *
 * TODO 要更改此生成的文件的模板，请转至
 * 窗口 － 首选项 － Java － 代码样式 － 代码模板
 */
package nc.ui.demo.tree.tree03;

import java.util.Enumeration;
import java.util.Vector;

import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

import nc.bs.framework.common.NCLocator;
import nc.itf.dahuan.pf.IdhServer;
import nc.itf.uap.IUAPQueryBS;
import nc.itf.uap.IVOPersistence;
import nc.jdbc.framework.processor.ColumnProcessor;
import nc.ui.bfriend.button.IdhButton;
import nc.ui.pub.ButtonObject;
import nc.ui.pub.ClientEnvironment;
import nc.ui.pub.beans.MessageDialog;
import nc.ui.pub.beans.UIRefPane;
import nc.ui.pub.bill.BillCardLayout;
import nc.ui.pub.bill.BillCardPanel;
import nc.ui.trade.bill.BillTemplateWrapper;
import nc.ui.trade.bill.ICardController;
import nc.ui.trade.bill.ISingleController;
import nc.ui.trade.business.HYPubBO_Client;
import nc.ui.trade.manage.BillManageUI;
import nc.ui.trade.pub.TableTreeNode;
import nc.ui.trade.pub.VOTreeNode;
import nc.ui.trade.treemanage.BillTreeManageUI;
import nc.ui.trade.treemanage.TreeManageEventHandler;
import nc.vo.dahuan.cttreebill.DhContractBVO;
import nc.vo.dahuan.cttreebill.DhContractVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.SuperVO;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;

/**
 * 
 * TODO 要更改此生成的类型注释的模板，请转至 窗口 － 首选项 － Java － 代码样式 － 代码模板
 */
public class MultiChildTreeCardEventHandler extends TreeManageEventHandler {

	IdhServer pfserver = (IdhServer)NCLocator.getInstance().lookup(IdhServer.class);
	IUAPQueryBS iQuery = (IUAPQueryBS)NCLocator.getInstance().lookup(IUAPQueryBS.class);
	
	public MultiChildTreeCardEventHandler(BillManageUI billUI,
			ICardController control) {
		super(billUI, control);

	}

	public boolean isAllowAddNode(TableTreeNode node) {

		return super.isAllowAddNode(node);
	}

	public boolean isAllowDelNode(TableTreeNode node) {

		return super.isAllowDelNode(node);
	}

	
	
	protected void onBoDelete() throws Exception {
		IUAPQueryBS query = NCLocator.getInstance().lookup(IUAPQueryBS.class);		
		// 判断合同类型
		DhContractVO vo = (DhContractVO)this.getBufferData().getCurrentVO().getParentVO();
		if(2 == vo.getHttype()){
			// 虚合同判断有无子合同
			String jobcode = vo.getJobcode();
			String sql = "select count(1) from dh_contract where jobcode like '"+jobcode+"%' ";
			Integer count = (Integer)query.executeQuery(sql, new ColumnProcessor());
			if(count > 1){
				MessageDialog.showHintDlg(this.getBillUI(), "提示","该虚合同存在子合同，不可删除");
				return;
			}
			// 盖章的合同不能删除
			DhContractVO dhcvo = (DhContractVO)HYPubBO_Client.queryByPrimaryKey(DhContractVO.class,vo.getPk_contract());
			int isseal = dhcvo.getIs_seal()==null ? 0 : dhcvo.getIs_seal().intValue();
			if(1==isseal){
				MessageDialog.showHintDlg(this.getBillUI(), "提示","该虚合同已盖章，不可删除");
				return;
			}
		}else{
			int vbillstatus = vo.getVbillstatus();
			if(8 != vbillstatus){
				MessageDialog.showHintDlg(this.getBillUI(), "提示","该合同在审批中，不可删除");
				return;
			}
		}
		if(MessageDialog.ID_OK == MessageDialog.showOkCancelDlg(this.getBillUI(), "提示","是否确认删除")){
			HYPubBO_Client.deleteByWhereClause(DhContractBVO.class, "  pk_contract = '"+vo.getPk_contract()+"'");
			HYPubBO_Client.deleteByWhereClause(DhContractVO.class, "  pk_contract = '"+vo.getPk_contract()+"'");
			MessageDialog.showHintDlg(this.getBillUI(), "提示","删除操作完成");
			MultiChildTreeCardUI ui = (MultiChildTreeCardUI)this.getBillUI();
			ui.updateTreeData();
		}
	}
	



	@Override
	public void onButton(ButtonObject bo) {
		// 对新增按钮校验
		String code = bo.getCode().trim();
		boolean flag = false;
		IUAPQueryBS query = NCLocator.getInstance().lookup(IUAPQueryBS.class);
		String user = this._getOperator();
		String corp = this._getCorp().getPrimaryKey();
		if("自制单据".equals(code)){			
			String sql = "select count(1) from dh_fkgx a,dh_fkgx_d b where a.pk_fkgx=b.pk_fkgx and nvl(a.dr,0)=0"
				 		+ " and nvl(b.dr,0)=0 and b.pk_dept_user='"+user+"' and a.pk_corp='"+corp+"'";
			try {
				int count = (Integer)query.executeQuery(sql, new ColumnProcessor());
				if(count != 1){
					MessageDialog.showHintDlg(this.getBillUI(), "提示","合同只能业务人员制作");
					return;
				}else{
					flag = true;					
				}
			} catch (BusinessException e) {
				e.printStackTrace();
			}
						
		}
		
		super.onButton(bo);
		
		if(flag){
			BillCardPanel card = ((BillManageUI)this.getBillUI()).getBillCardPanel();
			BillCardLayout layout = (BillCardLayout)card.getLayout();
			layout.setHeadScale(60);
			layout.layoutContainer(card);
			// 默认带出主管
			String sql2 = "select a.pk_user1 from dh_fkgx a,dh_fkgx_d b where a.pk_fkgx=b.pk_fkgx and nvl(a.dr,0)=0"
		 		+ " and nvl(b.dr,0)=0 and b.pk_dept_user='"+user+"' and a.pk_corp='"+corp+"'";
			try {
				String mauser = (String)query.executeQuery(sql2, new ColumnProcessor());
				this.getBillCardPanelWrapper().getBillCardPanel().getHeadItem("vapproveid").setValue(mauser);
				this.getBillCardPanelWrapper().getBillCardPanel().getHeadItem("htaddress").setValue("南京");
				
				// 存货过滤掉10分类
				UIRefPane pduUif = (UIRefPane)card.getHeadItem("ctname").getComponent();
				pduUif.getRefModel().addWherePart(" and bd_invbasdoc.pk_invcl <> '0001AA10000000000010' ", true);
				
				UIRefPane invUif = (UIRefPane)card.getBodyItem("invcode").getComponent();
				invUif.getRefModel().addWherePart(" and bd_invbasdoc.pk_invcl <> '0001AA10000000000010' ", true);
				
			} catch (BusinessException e) {
				e.printStackTrace();
			}
						
		}
		
	}
	
	

	@Override
	protected void onBoCard() throws Exception {
		((BillManageUI)this.getBillUI()).setCurrentPanel(BillTemplateWrapper.CARDPANEL);
		BillCardPanel card = ((BillManageUI)this.getBillUI()).getBillCardPanel();
		BillCardLayout layout = (BillCardLayout)card.getLayout();
		layout.setHeadScale(60);
		layout.layoutContainer(card);
		getBufferData().updateView();
	}
	
	/**
	 * 必填字段校验
	 * @param colvalue : 字段值
	 * @param colname ： 字段名称
	 * */
	private String checkCertianColumn(String[] colvalue,String[] colname){
		String message = "";
		for(int i=0 ; i<colvalue.length ; i++){
			if(null == colvalue[i] || "".equals(colvalue[i])){
				message += colname[i] + ",";
			}
		}
		return message;
	}
	
	/**
	 * 校验项目编码和合同编号是否重复
	 * @param pkCont 合同主键
	 * @param xmcode 项目编码
	 * @param htcode 合同编号
	 * @return 校验结果
	 * */
	private String checkXmCodeOnly(String pkCont,String xmcode,String htcode) throws Exception{
		String sql1 ="";
		String sql2 ="";
		String sql3 ="";
		String sql4 ="";
		
		if("".equals(pkCont)){
			sql1 = "select count(1) from bd_jobbasfil where jobcode='"+xmcode+"' and nvl(dr,0)=0 ";
			sql2 = "select count(1) from bd_jobbasfil where jobname='"+htcode+"' and nvl(dr,0)=0 ";	
			sql3 = "select count(1) from dh_contract where jobcode='"+xmcode+"' and nvl(dr,0)=0 ";
			sql4 = "select count(1) from dh_contract where ctcode='"+htcode+"' and nvl(dr,0)=0 ";	
		}else{
			sql1 = "select count(1) from bd_jobbasfil where jobcode='"+xmcode+"' and nvl(dr,0)=0 ";
			sql2 = "select count(1) from bd_jobbasfil where jobname='"+htcode+"' and nvl(dr,0)=0 ";	
			sql3 = "select count(1) from dh_contract where jobcode='"+xmcode+"' and nvl(dr,0)=0 and pk_contract <> '"+pkCont+"'";
			sql4 = "select count(1) from dh_contract where ctcode='"+htcode+"' and nvl(dr,0)=0 and pk_contract <> '"+pkCont+"'";
		}
		int count1 = (Integer)iQuery.executeQuery(sql1, new ColumnProcessor());
		int count2 = (Integer)iQuery.executeQuery(sql2, new ColumnProcessor());
		int count3 = (Integer)iQuery.executeQuery(sql3, new ColumnProcessor());
		int count4 = (Integer)iQuery.executeQuery(sql4, new ColumnProcessor());
		
		if(count1 != 0 || count3 != 0){
			return "项目编码已存在";
		}else if(count2 != 0 || count4 != 0){
			return "合同编号已存在";
		}else{
			return "";
		}
		
	}
	
	/**
	 * 合同号与部门关联的校验
	 * @param htcode : 合同号
	 * @param dpbelongname : 合同归属部门
	 * @param dpdrawname : 合同制单部门
	 * */
	private String checkCodeDeptRelation(String htcode,String dpbelongname,String dpdrawname) throws Exception{
		// 合同的第一个字
		String htcodeFrt = htcode.substring(0, 1);
		// 合同归属部门的第一个字
		String dpbelongFrt = dpbelongname.substring(0, 1);
		// 合同制单部门的第一个字
		String dpdrawFrt = dpdrawname.substring(0, 1);
		
		if("土建工程部".equals(dpdrawname)){
			// 无需校验			
		}else if(dpdrawname.contains("自动化")){
			// 含有自动化的部门，合同名包含电气,且合同归属部门的第一个字和合同号的第一个字要相同
			if(!htcode.contains("电气")){
				return "自动化的合同编码要含有电气";
			}
			if(!htcodeFrt.equals(dpbelongFrt)){
				return "合同归属部门的第一个字和合同号的第一个字要相同";
			}
		}else{
			if(!htcodeFrt.equals(dpdrawFrt)){
				return "合同制单部门的第一个字和合同号的第一个字要相同";
			}
			if(!htcodeFrt.equals(dpbelongFrt)){
				return "合同归属部门的第一个字和合同号的第一个字要相同";
			}
		}
		return "";
	}
	
	/**
	 * 合同数据校验
	 * */
	private String checkDataValue() throws Exception{
		
		// 判断新增还是修改(根据pk_contract是否有值)
		BillCardPanel htcard = this.getBillCardPanelWrapper().getBillCardPanel();
		// 合同主键
		String pkCont = dealValueOfStr(htcard, "pk_contract");
		// 项目编码
		String xmcode = dealValueOfStr(htcard, "jobcode");
		// 合同编号
		String htcode = dealValueOfStr(htcard, "ctcode");
		
		String retmessage = checkXmCodeOnly(xmcode, htcode, pkCont);
		if(!"".equals(retmessage)){
			return retmessage;
		}
		
		// 合同属性
		int httype = dealValueOfInt(htcard, "httype");
		if(httype != 0 && httype != 1){
			return "";
		}else{
			//  银行账号
			String htbankno = dealValueOfStr(htcard,"sax_no");
//			if(htbankno.length() < 12){
//				return "银行账号不能小于12位";
//			}	
			
			// 合同归属部门
			UIRefPane deptbelongRefp = (UIRefPane)htcard.getHeadItem("ht_dept").getComponent();
			String dpbelongname = deptbelongRefp.getRefName();
			// 合同制单部门
			UIRefPane deptdrawRefp = (UIRefPane)htcard.getHeadItem("pk_deptdoc").getComponent();
			String dpdrawname = deptdrawRefp.getRefName();
			// 合同名称
			String htname = dealValueOfRef(htcard, "ctname");
			// 合同类型
			String htlx = dealValueOfRef(htcard, "pk_cttype");
			// 销售客户
			String htkh = dealValueOfRef(htcard, "pk_cust1");
			// 供应商
			String htgys = dealValueOfRef(htcard, "pk_cust2");
			// 开户银行
			String htbank = dealValueOfStr(htcard,"pk_bank");			
			// 签约地点
			String htaddress = dealValueOfStr(htcard,"htaddress");
			// 签约时间
			String httime = dealValueOfStr(htcard,"htrq");
			// 结算方式
			String jsfs = dealValueOfRef(htcard,"pk_skfs");
			// 签约人
			String htqdr = dealValueOfRef(htcard,"pk_fzr");
			// 项目经理
			String xmjl = dealValueOfRef(htcard,"pk_xmjl");
			// 预审人
			String ysr = dealValueOfRef(htcard,"pk_ysid");
			// 副总
			String pkfuzong = dealValueOfRef(htcard,"pk_fuzong");
			// 开始时间
			String dstartdate = dealValueOfStr(htcard,"dstartdate");
			// 交货地点
			String vjhaddress = dealValueOfStr(htcard,"vjhaddress");
			
			if(0==httype){
				String[] clovalue = new String[]{
						dpbelongname,dpdrawname,htname,htlx,htkh,htbank,htbankno,
<<<<<<< .mine
						htaddress,httime,jsfs,htqdr,ysr,pkfuzong
=======
						htaddress,httime,jsfs,htqdr,ysr,pkfuzong,xmjl,xmname,pkCurrty,currtyRate
>>>>>>> .r1623
				}; 
				String[] cloname = new String[]{
					"[合同归属部门]","[合同制单部门]","[合同名称]","[合同类型]","[销售客户]","[开户银行]","[银行账号]",
					"[签订地点]","[签订时间]","[结算方式]","[签订人]","[预审人]","[副总]"
				};
				String message = checkCertianColumn(clovalue,cloname);
				if(!"".equals(message)){
					return "请维护以下信息：\n"+message.substring(0, message.length()-1);
				}
			}else{
				String[] clovalue = new String[]{
						dpbelongname,dpdrawname,htname,htlx,htgys,htbank,htbankno,
<<<<<<< .mine
						htaddress,httime,jsfs,htqdr,ysr,pkfuzong,vjhaddress
=======
						htaddress,httime,jsfs,htqdr,ysr,pkfuzong,vjhaddress,xmjl,xmname,pkCurrty,currtyRate
>>>>>>> .r1623
				}; 
				String[] cloname = new String[]{
					"[合同归属部门]","[合同制单部门]","[合同名称]","[合同类型]","[供应商]","[开户银行]","[银行账号]",
					"[签订地点]","[签订时间]","[结算方式]","[签订人]","[预审人]","[副总]","[收/发货地点]"
				};
				String message = checkCertianColumn(clovalue,cloname);
				if(!"".equals(message)){
					return "请维护以下信息：\n"+message.substring(0, message.length()-1);
				}
			}
			
//			String cdrMsg = checkCodeDeptRelation(htcode, dpbelongname, dpdrawname);
//			if(!"".equals(cdrMsg)){
//				return cdrMsg;
//			}
		}	
		
		return "";
	}


	protected void onBoSave() throws Exception {

		// 画面值校验		
		this.getBillCardPanelWrapper().getBillCardPanel().dataNotNullValidate();
		String msg = checkDataValue();
		if(!"".equals(msg)){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", msg);
			return;
		}
		
		// 画面特殊值统计
		BillCardPanel htcard = this.getBillCardPanelWrapper().getBillCardPanel();
		int httype = dealValueOfInt(htcard, "httype");
		if(httype != 1 && httype != 0){
			// 虚合同
			String htcode = dealValueOfStr(htcard, "ctcode");
			if(htcode.trim().length()==2){
				htcard.setHeadItem("pk_deptdoc", null);
			}
			htcard.setHeadItem("vbillstatus", 1);
		}else{
			// 子表统计金额
			DefaultTableModel totalmodel = htcard.getBillModel().getTotalTableModel();
			Vector vor = totalmodel.getDataVector();
			UFDouble dscaje = (UFDouble)((Vector)vor.get(0)).get(8);
//			if(dscaje.compareTo(new UFDouble("0.00"))<=0){
//				MessageDialog.showHintDlg(this.getBillUI(), "提示","合同金额合计小于等于零，不能保存");
//				return;
//			}
			htcard.setHeadItem("vbillstatus", 8);
			// 合同金额
			htcard.setHeadItem("dctjetotal", dscaje);
			if(httype == 0){
				// 销售金额
				htcard.setHeadItem("dsaletotal", dscaje);
			}else{
				// 采购金额
				htcard.setHeadItem("dcaigtotal", dscaje);
			}
		}
		
		// 保存操作执行
		AggregatedValueObject billVO = getBillUI().getVOFromUI();
		setTSFormBufferToVO(billVO);
			
		// 进行数据清空
		Object o = null;
		ISingleController sCtrl = null;
		if (getUIController() instanceof ISingleController) {
			sCtrl = (ISingleController) getUIController();
			if (sCtrl.isSingleDetail()) {
				o = billVO.getParentVO();
				billVO.setParentVO(null);
			} else {
				o = billVO.getChildrenVO();
				billVO.setChildrenVO(null);
			}
		}

		boolean isSave = true;

		// 判断是否有存盘数据
		if (billVO.getParentVO() == null && (billVO.getChildrenVO() == null || billVO.getChildrenVO().length == 0)) {
			isSave = false;
		} else {
			DhContractVO parvo = (DhContractVO)billVO.getParentVO();			
				
			//检查是否符合传项目档案 wanglong 2014-02-24	
			pfserver.checkJobaseData(parvo);
			
			if("".equals(parvo.getPk_contract() == null ? "" : parvo.getPk_contract())){
				String primKey = HYPubBO_Client.insert(parvo);	
				parvo.setPk_contract(primKey);
			}else{
				HYPubBO_Client.update(parvo);
			}
				
			HYPubBO_Client.deleteByWhereClause(DhContractBVO.class, " pk_contract = '"+parvo.getPk_contract()+"'");
			DhContractBVO[] chvos = (DhContractBVO[])billVO.getChildrenVO();
			DhContractBVO[] nevos = new DhContractBVO[chvos.length];
			for(int i=0 ; i<chvos.length ; i++){
				DhContractBVO bvo = chvos[i];
				bvo.setPk_contract(parvo.getPk_contract());
				String primKeyBB = HYPubBO_Client.insert(bvo);	
				bvo.setPk_contract_b(primKeyBB);
				nevos[i]=bvo;
			}
				
			billVO.setParentVO(parvo);
			billVO.setChildrenVO(nevos);
		}

		// 进行数据恢复处理
		if (sCtrl != null) {
			if (sCtrl.isSingleDetail())
				billVO.setParentVO((CircularlyAccessibleValueObject) o);
		}
		int nCurrentRow = -1;
		if (isSave) {
			if (isEditing()) {
				if (getBufferData().isVOBufferEmpty()) {
					getBufferData().addVOToBuffer(billVO);
					nCurrentRow = 0;
				} else {
					getBufferData().setCurrentVO(billVO);
					nCurrentRow = getBufferData().getCurrentRow();
				}
			} else {
				getBufferData().addVOsToBuffer(new AggregatedValueObject[] { billVO });
				nCurrentRow = getBufferData().getVOBufferSize() - 1;
			}
		}

		if (nCurrentRow >= 0) {
			getBufferData().setCurrentRowWithOutTriggerEvent(nCurrentRow);
		}
			
		setAddNewOperate(isAdding(), billVO);

		// 设置保存后状态
		setSaveOperateState();
			
		if (nCurrentRow >= 0) {
			getBufferData().setCurrentRow(nCurrentRow);
		}
		
		refashTreeVO();

	}
	
	private void refashTreeVO(){
		BillTreeManageUI treeUI = (BillTreeManageUI) getBillTreeManageUI();

		AggregatedValueObject aggvo = this.getBillTreeManageUI()
				.getBufferData().getCurrentVO();
		DhContractVO headvo = (DhContractVO) aggvo.getParentVO();
		treeUI.getBillTreeData().insertNodeToTree(headvo);
		VOTreeNode selectnode = new VOTreeNode("");
		selectnode.setNodeID(headvo.getPk_contract());
		selectnode.setCode(headvo.getCtcode());

		selectnode.setData(aggvo.getParentVO());
		setSelectionPath(headvo);
		this.onTreeSelected(selectnode);
	}

	public void setSelectionPath(DhContractVO headvo) {
		TreePath selectTreePath = null;
		MultiChildTreeCardUI treeUI = (MultiChildTreeCardUI) getBillTreeManageUI();

		DefaultTreeModel treeModel = (DefaultTreeModel) treeUI.getBillTree()
				.getModel();
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) treeModel
				.getRoot();

		Enumeration en = root.preorderEnumeration();
		while (en.hasMoreElements()) {
			TableTreeNode treeNode = (TableTreeNode) en.nextElement();
			if ("root".equalsIgnoreCase(treeNode.getNodeID().toString().trim()))
				continue;
			VOTreeNode voTreeNode = (VOTreeNode) treeNode;
			CircularlyAccessibleValueObject deptdocVO = voTreeNode.getData();
			if (headvo.getCtcode().equalsIgnoreCase(
					deptdocVO.getAttributeValue("ctcode").toString())) {
				TreeNode[] treeNodes = treeModel.getPathToRoot(voTreeNode);
				selectTreePath = new TreePath(treeNodes);
				break;
			}
		}

		if (selectTreePath != null) {
			treeUI.getBillTree().expandPath(selectTreePath);
			treeUI.getBillTree().setSelectionPath(selectTreePath);
		}
	}

	public void onTreeSelected(VOTreeNode selectnode) {
		super.onTreeSelected(selectnode);
	}

	protected void setAddNewOperate(boolean isAdding,
			AggregatedValueObject billVO) throws Exception {

		super.setAddNewOperate(isAdding, billVO);
	}
	
	protected void onBoEdit() throws Exception {
		//v_deptperonal 人员关系视图
		String user = this._getOperator();
		String corp = this._getCorp().getPrimaryKey();
		String sql = "select count(1) from v_deptperonal where pk_corp = '"+corp+"' and pk_user = '"+user+"' and pdsn_level='1'";
		IUAPQueryBS query = NCLocator.getInstance().lookup(IUAPQueryBS.class);
//		int count = (Integer)query.executeQuery(sql, new ColumnProcessor());
//		if(count != 1){
//			MessageDialog.showHintDlg(this.getBillUI(), "提示","合同只能业务人员制作");
//			return;
//		}
//		
		DhContractVO patVO = (DhContractVO)this.getBufferData().getCurrentVO().getParentVO();
//		if(!user.equals(patVO.getVoperatorid())){
//			MessageDialog.showHintDlg(this.getBillUI(), "提示","合同只能让制作此单据的人修改");
//			return;
//		}
		
		
		DhContractVO newVO = (DhContractVO)query.retrieveByPK(DhContractVO.class, patVO.getPk_contract());
		
		if(2 == newVO.getHttype()){
			// 虚合同判断有无子合同
			String jobcode = newVO.getJobcode();
			String jobsql = "select count(1) from dh_contract where jobcode like '"+jobcode+"%' ";
			Integer jobcnt = (Integer)query.executeQuery(jobsql, new ColumnProcessor());
			if(jobcnt > 1){
				MessageDialog.showHintDlg(this.getBillUI(), "提示","该虚合同存在子合同，不可修改");
				return;
			}else{
				super.onBoEdit();
				BillCardPanel card = ((BillManageUI)this.getBillUI()).getBillCardPanel();
				BillCardLayout layout = (BillCardLayout)card.getLayout();
				layout.setHeadScale(60);
				layout.layoutContainer(card);
				this.getBillCardPanelWrapper().getBillCardPanel().getHeadItem("vbillstatus").setEdit(false);
				// 存货过滤掉10分类
				UIRefPane pduUif = (UIRefPane)card.getHeadItem("ctname").getComponent();
				pduUif.getRefModel().addWherePart(" and bd_invbasdoc.pk_invcl <> '0001AA10000000000010' ", true);
				
				UIRefPane invUif = (UIRefPane)card.getBodyItem("invcode").getComponent();
				invUif.getRefModel().addWherePart(" and bd_invbasdoc.pk_invcl <> '0001AA10000000000010' ", true);
				
			}
		}else{		
			if(8 != newVO.getVbillstatus()){
				MessageDialog.showHintDlg(this.getBillUI(), "提示","单据在审批流中不可修改");
				return;
			}
			
			super.onBoEdit();
			BillCardPanel card = ((BillManageUI)this.getBillUI()).getBillCardPanel();
			BillCardLayout layout = (BillCardLayout)card.getLayout();
			layout.setHeadScale(60);
			layout.layoutContainer(card);
			this.getBillCardPanelWrapper().getBillCardPanel().getHeadItem("vbillstatus").setEdit(false);
			
			//	 存货过滤掉10分类
			UIRefPane pduUif = (UIRefPane)card.getHeadItem("ctname").getComponent();
			pduUif.getRefModel().addWherePart(" and bd_invbasdoc.pk_invcl <> '0001AA10000000000010' ", true);
			pduUif.setPK(newVO.getCtname());
			
			UIRefPane invUif = (UIRefPane)card.getBodyItem("invcode").getComponent();
			invUif.getRefModel().addWherePart(" and bd_invbasdoc.pk_invcl <> '0001AA10000000000010' ", true);
			
		}
	}

	protected void onBoQuery() throws Exception {

		StringBuffer strWhere = new StringBuffer();

		if (askForQueryCondition(strWhere) == false)
			return;// 用户放弃了查询

		String pkUser = this._getOperator();
		String pkCorp = this._getCorp().getPrimaryKey();
		
		String cwhere = strWhere.toString() + 
						" and (dh_contract.pk_deptdoc in (select vd.pk_deptdoc from v_deptperonal vd where vd.pk_corp = '"+pkCorp+"' " +
						" and vd.pk_user = '"+pkUser+"') or dh_contract.ht_dept in (select vd.pk_deptdoc from v_deptperonal vd " +
						" where vd.pk_corp = '"+pkCorp+"' and vd.pk_user = '"+pkUser+"'))";
		
		SuperVO[] queryVos = queryHeadVOs(cwhere);

		getBufferData().clear();
		// 增加数据到Buffer
		addDataToBuffer(queryVos);

		updateBuffer();
	}


	@Override
	protected void onBoCommit() throws Exception {
		DhContractVO patVO = (DhContractVO)this.getBufferData().getCurrentVO().getParentVO();
		// 判断当前操作人是否是制单人
		String operid = _getOperator();
		String zdr = patVO.getVoperatorid();
		if(!zdr.equals(operid)){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "请让该单据的制单人提交此单据");
			return;
		}
		String htcode = patVO.getCtcode();
		if(htcode.equalsIgnoreCase("")){
			this.getBillUI().showErrorMessage("合同编码不可以为空！");
			return ;
		}else{
		 int num = pfserver.queryfilesystem(htcode); //合同必须有附件才可以提交 wanglong
		 if(num > 0){
			 
		 }else {
			 this.getBillUI().showErrorMessage("必须上传合同文本后才可以提交！");
				return ;
		 }
		}

		String pk = patVO.getPrimaryKey();
		IUAPQueryBS query = NCLocator.getInstance().lookup(IUAPQueryBS.class);
		IVOPersistence iv = NCLocator.getInstance().lookup(IVOPersistence.class);
		DhContractVO newVO = (DhContractVO)query.retrieveByPK(DhContractVO.class, pk);
		// 比较界面上的单据状态和数据库中的单据状态
		if(patVO.getVbillstatus().intValue() != newVO.getVbillstatus().intValue()){
			MessageDialog.showErrorDlg(this.getBillUI(), "提示", "单据状态已发生改变，请刷新后在操作");
			return;
		}
		if(3 == newVO.getVbillstatus()){
			MessageDialog.showErrorDlg(this.getBillUI(), "提示", "单据已提交");
			return;
		}else if(8 == newVO.getVbillstatus()){
			newVO.setVbillstatus(3);
			newVO.setYs_flag("0");
			iv.updateVO(newVO);
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "提交成功");
			this.onBoRefresh();
		}
		
	}
	
	
	
	protected void onBoElse(int intBtn) throws Exception {
		super.onBoElse(intBtn);
		if (intBtn == IdhButton.RET_COMMIT) {
			retCommit();
		}
		
		if (intBtn == IdhButton.SEAL) {
			htSeal();
		}
		if (intBtn == IdhButton.FILEUPLOAD) {
			DhContractVO cvo = (DhContractVO)this.getBufferData().getCurrentVO().getParentVO();
			
			String pkCorp = ClientEnvironment.getInstance().getCorporation().getPk_corp();
			
			if("1001".equals(pkCorp)){
				DocumentManagerHT.showDM(this.getBillUI(), "DHHT", cvo.getCtcode());
			}else{
				if(null == cvo.getRelationid() || "".equals(cvo.getRelationid())){
					DocumentManagerHT.showDM(this.getBillUI(), "DHHT", cvo.getCtcode());
				}else{
					IUAPQueryBS iQ = (IUAPQueryBS)NCLocator.getInstance().lookup(IUAPQueryBS.class.getName());
					String sql = "select ctcode from dh_contract where pk_contract = '"+cvo.getRelationid()+"'";
					String relcode = (String)iQ.executeQuery(sql, new ColumnProcessor());
					DocumentManagerHT.showDM(this.getBillUI(), "DHHT", relcode);
				}
			}
			
		}
		
		if(intBtn == IdhButton.CONEXE){
			conExecute();
		}
		
	}

	
	// 执行
	private void conExecute() throws Exception{
		
		AggregatedValueObject aggvo = this.getBufferData().getCurrentVO();
		if(aggvo != null){
			DhContractVO dcvo = (DhContractVO)aggvo.getParentVO();
			
			int httype = dcvo.getHttype();
			if(!(0==httype || 1==httype)){
				MessageDialog.showHintDlg(this.getBillUI(), "提示", "只有采购合同和销售合同可以操作此按钮");
				return;
			}
			
			int isSeal = dcvo.getIs_seal();
			if(isSeal == 1){
				int isCon = dcvo.getIs_conexe();
				if(isCon == 0){
					ConExecuteDialog cedg = new ConExecuteDialog(this.getBillUI());
					cedg.showConExecuteModel(dcvo);
				}else{
					MessageDialog.showHintDlg(this.getBillUI(), "提示", "单据已做过执行操作");
				}
			}else{
				MessageDialog.showHintDlg(this.getBillUI(), "提示", "请先盖章");
			}			
		}else{
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "请选择单据");
		}
	}
	
	// 驳回
	private void retCommit() throws Exception {
		AggregatedValueObject aggVO = this.getBufferData().getCurrentVO();
		if(null == aggVO){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "请选择单据");
			return;
		}
		
		DhContractVO patVO = (DhContractVO)aggVO.getParentVO();
		// 判断当前操作人是否是制单人
		String operid = _getOperator();
		String zdr = patVO.getVoperatorid();
		if(!zdr.equals(operid)){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "请让该单据的制单人驳回此单据");
			return;
		}
		String pk = patVO.getPrimaryKey();
		IUAPQueryBS query = NCLocator.getInstance().lookup(IUAPQueryBS.class);
		IVOPersistence iv = NCLocator.getInstance().lookup(IVOPersistence.class);
		DhContractVO newVO = (DhContractVO)query.retrieveByPK(DhContractVO.class, pk);
		// 比较界面上的单据状态和数据库中的单据状态
		if(patVO.getVbillstatus().intValue() != newVO.getVbillstatus().intValue()){
			MessageDialog.showErrorDlg(this.getBillUI(), "提示", "单据状态已发生改变，请刷新后在操作");
			return;
		}
		if(3!=newVO.getVbillstatus().intValue()){
			MessageDialog.showErrorDlg(this.getBillUI(), "提示", "单据已在审批中不可驳回");
			return;
		}
		newVO.setVbillstatus(8);
		iv.updateVO(newVO);
		MessageDialog.showHintDlg(this.getBillUI(), "提示", "驳回成功");
		this.onBoRefresh();
	}

	// 盖章实现
	private void htSeal() throws Exception{
		AggregatedValueObject aggVO = this.getBufferData().getCurrentVO();
		if(null == aggVO){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "请先选择合同单据");
			return;
		}
		DhContractVO dhvo = (DhContractVO)aggVO.getParentVO();
		if(null == dhvo){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "请先选择合同单据");
			return;
		}

		String pk = dhvo.getPrimaryKey();
		DhContractVO newdhvo = (DhContractVO)NCLocator.getInstance().lookup(IUAPQueryBS.class).retrieveByPK(DhContractVO.class, pk);
		int status = newdhvo.getVbillstatus();
		if(status != 1){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "合同单据审核流程未走完");
			return;
		}
		int seal = newdhvo.getIs_seal()==null ? 0 : newdhvo.getIs_seal();
		if(seal == 1){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "合同单据已盖章");
			return;
		}		
		
		String user = _getOperator();
		UFDate date = _getDate();
		
		// 判断当前操作人是否是制单人
		String zdr = dhvo.getVoperatorid();
		if(!zdr.equals(user)){
			MessageDialog.showHintDlg(this.getBillUI(), "提示", "请让该单据的制单人盖章此单据");
			return;
		}
		
		NCLocator.getInstance().lookup(IdhServer.class).SealDhht(dhvo, user, date);
		MessageDialog.showHintDlg(this.getBillUI(), "提示", "盖章完成");
		this.onBoRefresh();
	}
	
	
	@Override
	protected void onBoImport() throws Exception {
		RelationContractDialog dg = new RelationContractDialog(this.getBillUI());
		AggregatedValueObject billvo = dg.showConExecuteModel();
		if(null != billvo){
			getBufferData().addVOsToBuffer(new AggregatedValueObject[] { billvo });
			int nCurrentRow = getBufferData().getVOBufferSize() - 1;
			if (nCurrentRow >= 0) {
				getBufferData().setCurrentRowWithOutTriggerEvent(nCurrentRow);
				getBufferData().setCurrentRow(nCurrentRow);
			}
			
			refashTreeVO();
		}
	}

	/**
	 * 字符串型值处理
	 * @param itemkey : 字段名
	 * */
	private String dealValueOfStr(BillCardPanel card,String itemkey){
		String value = card.getHeadItem(itemkey).getValueObject() == null ? "" 
			 				: card.getHeadItem(itemkey).getValueObject().toString();
		return value;
	}
	
	/**
	 * 参照型值处理
	 * @param itemkey : 字段名
	 * */
	private String dealValueOfRef(BillCardPanel card,String itemkey){
		UIRefPane ikref = (UIRefPane)card.getHeadItem(itemkey).getComponent();
		return ikref.getRefPK();
	}
	
	/**
	 * 整数型值处理
	 * @param itemkey : 字段名
	 * */
	private int dealValueOfInt(BillCardPanel card,String itemkey){
		Object ikobj = card.getHeadItem(itemkey).getValueObject();
		if(null == ikobj || "".equals(ikobj)){
			return 0;
		}else{
			String ikstr = ikobj.toString();
			return Integer.parseInt(ikstr);
		}
	}
	
	/**
	 * 小数型值处理
	 * @param itemkey : 字段名
	 * */
	private UFDouble dealValueOfDouble(BillCardPanel card,String itemkey){
		Object ikobj = card.getHeadItem(itemkey).getValueObject();
		if(null == ikobj || "".equals(ikobj)){
			return new UFDouble("0.00");
		}else{
			String ikstr = ikobj.toString();
			return new UFDouble(ikstr);
		}
	}

}